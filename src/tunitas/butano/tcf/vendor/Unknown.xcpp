// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::vendor {
  //
  // The vendor is valid, being in the acceptable range.
  // but it is not known;
  // e.g. it is unspecified in the range-of-vendor expressions.
  //
  // Usage:
  //
  //     throw Unknown();
  //
  // [[currently]] not used.
  //
  class Unknown;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.Exception
#import std.runtime_error
#import std.string
class tunitas::butano::tcf::vendor::Unknown : public std::runtime_error, public tcf::Exception {
  using Ancestor = std::runtime_error;
public:
  inline Unknown();
  inline explicit Unknown(std::string const &reason);
  inline auto what() const noexcept -> char const * final;
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::vendor {
  Unknown::Unknown()
    : Ancestor("unknown vendor")
  { }
  Unknown::Unknown(std::string const &reason)
    : Ancestor(reason)
  { }
  auto Unknown::what() const noexcept -> char const * {
    return Ancestor::what();
  }
}
#endiv
