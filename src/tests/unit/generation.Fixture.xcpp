// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media (c) 2018-2019, the license statement is nearby; licensable under Apache 2.0
#divert <fpp>
namespace tests::unit::generation { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::generation::Fixture : public cppunit::test::Fixture {
public:
  template<typename TYPE> auto test_randomness_Distribution() -> void;
  auto test_randomness_Engine() -> void;
  auto test_uuid_Distribution() -> void;
  auto test_tcf_Distribution() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static constexpr auto LIMIT = 10u;
  template<typename DISTRIBUTION> auto basic_test_Distribution() -> void;
};
#endiv
#divert <tpp>
#import tests.unit.printable
#import tunitas.butano.generation.randomness.Engine
#import std.type_info
#import std.cerr
template<typename DISTRIBUTION> auto tests::unit::generation::Fixture::basic_test_Distribution() -> void {
  using ::tunitas::butano::generation::randomness::Engine;
  using Subject = DISTRIBUTION;
  Engine engine;
  Subject subject; // <------------------------------------------------------- test this
  std::cerr << "generating(" << typeid(typename Subject::Result).name() << "):";
  auto sep = ' ';
  for (auto i{0u}, e{LIMIT}; e != i; ++i, sep='.') {
    auto generated = subject(engine); // <------------------------------------ test this
    std::cerr << sep << printable(generated);
  }
  std::cerr << '\n';
  CPPUNIT_ASSERT(true);
}
#import tunitas.butano.generation.randomness.Distribution
template<typename TYPE> auto tests::unit::generation::Fixture::test_randomness_Distribution() -> void {
  basic_test_Distribution<::tunitas::butano::generation::randomness::Distribution<TYPE>>();
}
#endiv
#divert <cpp>
#import tunitas.butano.generation.randomness.Engine
auto tests::unit::generation::Fixture::test_randomness_Engine() -> void {
  // This is "cut & paste" "the same" as basic_test_Distribution ... but with an unconstrained distribution.
  using Subject = ::tunitas::butano::generation::randomness::Engine;
  Subject subject; // <---------------------------------------------------- test this
  std::cerr << "generating(Engine):";
  auto sep = ' ';
  for (auto i{0u}, e{LIMIT}; e != i; ++i, sep='.') {
    auto generated = subject(); // <--------------------------------------- test this
    std::cerr << sep << printable(generated);
  }
  std::cerr << '\n';
  CPPUNIT_ASSERT(true);
}
#import tunitas.butano.generation.tcf.Distribution
auto tests::unit::generation::Fixture::test_tcf_Distribution() -> void {
  basic_test_Distribution<::tunitas::butano::generation::tcf::Distribution>();
}
#import tunitas.butano.generation.uuid.Distribution
auto tests::unit::generation::Fixture::test_uuid_Distribution() -> void {
  basic_test_Distribution<::tunitas::butano::generation::uuid::Distribution>();
}
#import std.byte
#import std.uint8_t
#import std.uint16_t
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::generation::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("generation");
  {
    Stream ran("randomness");
    {
      Stream dis("Distribution");
      dis << call("char", &Fixture::test_randomness_Distribution<char>)
          << call("byte", &Fixture::test_randomness_Distribution<std::byte>)
          << call("uint8_t", &Fixture::test_randomness_Distribution<std::uint8_t>)
          << call("unsigned char", &Fixture::test_randomness_Distribution<unsigned char>)
          << call("uint16_t", &Fixture::test_randomness_Distribution<std::uint16_t>)
        ;
      ran << add(dis.release());
    }
    series << call("Engine", &Fixture::test_randomness_Engine)
      ;
  } {
    Stream tcf("tcf");
    tcf << call("Distribution", &Fixture::test_tcf_Distribution)
      ;
    series << add(tcf.release());
  } {
    Stream uui("uuid");
    uui << call("Distribution", &Fixture::test_uuid_Distribution)
      ;
    series << add(uui.release());
  }
  return series.release();
}
#endiv
