// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
#import std.byte
namespace tunitas::butano::generation::limits {
  //
  // No well-defined bounds for many types.
  // But for the integral types, the bounds are well-defined.
  //
  template<typename RESULT> class Unbound;
  template<> class Unbound<bool>;
  template<> class Unbound<std::byte>;
}
#endiv
#divert <hpp>
#import std.enable_if
#import tunitas.butano.generation.limits.Bool
#import tunitas.butano.generation.limits.Enum
#import tunitas.butano.generation.limits.Numeric
namespace tunitas::butano::generation {
  template<typename RESULT> class limits::Unbound : public std::enable_if<std::is_integral<RESULT>::value, Numeric<RESULT>>::type { };
  // Recall: the second template argument to randomness::Distribution<...> is Unbound<RESULT>
  template<> class limits::Unbound<bool> : public Bool { };
  template<> class limits::Unbound<std::byte> : public Enum<std::byte, std::byte{0x00}, std::byte{0xff}> { };
}
#endiv
