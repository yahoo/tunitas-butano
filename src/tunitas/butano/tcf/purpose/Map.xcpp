// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::purpose {
  //
  // It's a Map in the Java style, not the C++ STL style.
  //
  // Usage:
  //
  //    rly?
  //
  class Map;
}
#endiv
#divert <hpp>
#import std.ostream
namespace tunitas::butano::tcf::purpose {
  inline auto operator<<(std::ostream &, Map const &) -> std::ostream &;
}
#import tunitas.butano.tcf // namespaces javalike, lite, timeline
#import tunitas.butano.tcf.id.ALL
#import want.javalike.Map
#import want.javalike.Boolean
#import tunitas.butano.tcf.consent.protocol.Limits
class tunitas::butano::tcf::purpose::Map : public want::javalike::Map<id::Purpose, want::javalike::Boolean> {
  using Ancestor = want::javalike::Map<id::Purpose, want::javalike::Boolean>;
public:
  Map() = default;
  inline explicit Map(Defaulting);
  inline auto get(id::Purpose i) const -> bool;
  inline auto put(id::Purpose p, bool b) -> void;
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::purpose {
  Map::Map(Defaulting) {
    using Limits = consent::protocol::Limits<id::Purpose>;
    Ancestor &self(*this);
    for (auto i(Limits::begin(without::NULLID)), e(Limits::end(without::NULLID)); e != i; ++i) {
      auto pid = id::Purpose(i);
      self[pid] = false;
    }
  }
   auto Map::get(id::Purpose i) const -> bool {
    auto const e = Ancestor::end();
    auto const f = Ancestor::find(i);
    return e != f && f->second;
  }
   auto Map::put(id::Purpose p, bool b) -> void {
    Ancestor &self(*this);
    self[p] = b;
  }
}
#import std.noboolalpha
namespace tunitas::butano::tcf {
  auto purpose::operator<<(std::ostream &os, Map const &ma) -> std::ostream & {
    // This presumes, but does not check (much), that the Map contains keys 1..24 and no other.
    if (ma.empty()) {
      os << '[' << ' ' << ']';
    } else if (24 == ma.size()) {
      char sep = '[';
      os << std::noboolalpha; // [[FIXTHIS]] - noboolalpha has no effect here because pair.second is Boolean, which ALWAYS prints its own way.
      for (auto const &pair : ma) {
        os << sep << pair.second;
        sep = ',';
      }
      os << ']';
    } else {
      // There is an unknown structure in the map ... what is it?
      // [[FIXTHIS]] This is Java legacy code; design this away.
      // ... by getting rid of an unbounded map to hold this fixed-sized data structure.
      // ... purpose::Map holds between zero and twenty four bits of a set; use purpose::Bitfield, nearby.
      char sep = '{';
      os << std::noboolalpha; // [[FIXTHIS]] - boolalpha - ibidem
      for (auto const &pair : ma) {
        os << sep << '{' << pair.first << '=' << pair.second << '}';
        sep = ',';
      }
      os << '}';
    }
    return os;
  }
}
#endiv
