// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
#import tunitas.butano.generation.randomness.Distribution.declaration
#import std.vector
namespace tunitas::butano::generation::randomness {
  template<> struct Distribution<std::vector<bool>>;
}
#endiv
#divert <hpp>
#import std.size_t
#import std.vector
#import tunitas.butano.generation.randomness.Distribution.bool
#import tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.limits.Unbound
namespace tunitas::butano::generation::randomness {
  template<> struct Distribution<std::vector<bool>> {
  public:
    using Value = std::vector<bool>;
    using Result = Value;
    inline explicit Distribution(std::size_t size);
    inline auto operator()(Engine &) -> Result;
  protected:
    std::size_t size;
    using Subdistribution = Distribution<bool, limits::Unbound<bool>>;
    Subdistribution subdistribution;
  };
}
#endiv
#divert <ipp>
#import std.vector
#import tunitas.butano.generation.randomness.Distribution
#import tunitas.butano.generation.randomness.Engine
namespace tunitas::butano::generation::randomness {
  Distribution<std::vector<bool>>::Distribution(std::size_t size) : size(size) { }
  auto Distribution<std::vector<bool>>::operator()(Engine &engine) -> Result {
    Result ret(size, false); // parents, not {size, false}
    for (auto e(size), i(e-e); e != i; ++i) {
      ret[i] = subdistribution(engine);
    }
    return ret;
  }
}
#endiv
