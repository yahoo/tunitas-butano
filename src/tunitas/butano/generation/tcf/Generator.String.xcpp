// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
#import tunitas.butano.generation.tcf.Generator.declaration
namespace tunitas::butano::generation::tcf {
  //
  // Generate a (pseudo-)random IAB TCF consent object.
  //
  // Usage:
  //
  //   std::seed_seq seeder{...something...};
  //   Generator<consent::String> generator(seeder);
  //   consent::String str = generator();      ........................ how easy is that?
  //
  template<> class Generator<String>;
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.tcf.Generator.Object
#import tunitas.butano.generation.tcf.distribution.fields.ALL
#import tunitas.butano.tcf.consent.String
#import tunitas.butano.tcf.consent.Builder
#import tunitas.butano.tcf.consent.Object
namespace tunitas::butano::generation::tcf {
  template<> class Generator<String> {
    using Version = singleton::id::version::Protocol;
    using Object = tunitas::butano::tcf::consent::Object;
    using Builder = tunitas::butano::tcf::consent::Builder;
  public:
    inline explicit Generator(std::seed_seq &);
    inline Generator(std::seed_seq &, Version);
    using Result = tcf::String;
    inline auto operator()() -> Result;
  protected:
    Generator<Object> subgen;
  };
}
#endiv
#divert <ipp>
#import tunitas.butano.tcf.consent.encode
namespace tunitas::butano::generation::tcf {
  Generator<String>::Generator(std::seed_seq &seeder)
    : subgen(seeder)
  { }
  Generator<String>::Generator(std::seed_seq &seeder, Version want)
    : subgen(seeder, want)
  { }
  auto Generator<String>::operator()() -> Result {
    return encode(subgen());
  }
}
#endiv
