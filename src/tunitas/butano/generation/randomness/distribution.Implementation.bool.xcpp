// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.declaration
#import tunitas.butano.generation.limits.Bool
namespace tunitas::butano::generation::randomness::distribution {
  template<> struct Implementation<bool, limits::Bool, /*IS_ENUM*/ false>;
  namespace implementation {
    using Boolean = distribution::Implementation<bool, limits::Bool, /*IS_ENUM*/ false>; // records the one allowable specialization
  }
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.integer.ALL
#import tunitas.butano.generation.limits.numeric.Bound
#forward tunitas.butano.generation.randomness.Engine
namespace tunitas::butano::generation::randomness::distribution {
  template<> class Implementation<bool, limits::Bool, false> : public Implementation<unsigned, limits::numeric::Bound<unsigned, 0, 1>, false> {
    using ancestor = Implementation<unsigned, limits::numeric::Bound<unsigned, 0, 1>, false>;
  public:
    using Value = bool;
    Implementation() = default;
    inline explicit Implementation(Value high) : ancestor((unsigned)high) { }
    inline Implementation(Value low, Value high) : ancestor((unsigned)low, (unsigned)high) { }
    using Result = Value;
    inline auto operator()(Engine &engine) -> Result;
  };
}
#endiv
#divert <ipp>
namespace tunitas::butano::generation::randomness::distribution {
  auto Implementation<bool, limits::Bool, false>::operator()(Engine &engine) -> Result {
    return Result(ancestor::operator()(engine));
  }
}
#endiv
