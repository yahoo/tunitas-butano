// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
#import tunitas.butano.tcf.consent.protocol.Field
namespace tunitas::butano::tcf::consent::encoding::getter::field {
  //
  // Specializing against the field name itself.
  // Abstracting over the SOURCE.
  //
  // Usage: see encoding.Getter, nearby.
  //
  template<protocol::Field, typename RESULT> class Prototype;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.consent.encoding.getter.Basis
#import tunitas.butano.tcf.consent.protocol.Field
#import tunitas.butano.tcf.consent.protocol.Limits // protocol::Limits<...>, protocol::Datum<...>
namespace tunitas::butano::tcf::consent::encoding {
  template<protocol::Field FIELD, typename RESULT> class getter::field::Prototype {
  protected:
    ~Prototype() = default;
  public:
    inline explicit Prototype(Basis *basis) : basis(basis) { }
    using Limits = protocol::Limits<protocol::Datum<FIELD>>;
    using Result = RESULT;
  protected:
    // This is to be non-const because we will modify fields back in the owner basis->position++
    Basis *basis;
  };
}
#endiv
