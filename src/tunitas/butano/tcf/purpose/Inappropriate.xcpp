// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::purpose {
  //
  // The purpose is inappropriate for the current semantic context.
  // See the commentariat in detail::Out_Of_Range for semantic fitness and purpose.
  //
  // The purpose is valid, yet not appropriate for the current context.
  // For example, the purposeId denotes some purpose that Yahoo refuses to perform.
  // The null purpose is an "appropriate" purpose.  Instead throw Null for the null purpose.
  //
  // Usage:
  //
  //   throw Inappropriate();
  //
  class Inappropriate;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.purpose.detail.Out_Of_Range
class tunitas::butano::tcf::purpose::Inappropriate : public detail::Out_Of_Range {
  using Ancestor = detail::Out_Of_Range;
public:
  inline Inappropriate();
  using Ancestor::Out_Of_Range;
  inline explicit Inappropriate(Identifier offending_id, tcf::exception::Range range);
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::purpose {
  Inappropriate::Inappropriate()
    : Ancestor("invalid purpose")
  { }
  Inappropriate::Inappropriate(Identifier offending_id, tcf::exception::Range range)
    : Ancestor(format("Purpose", "inappropriate", offending_id, range))
  { }
}
#endiv
