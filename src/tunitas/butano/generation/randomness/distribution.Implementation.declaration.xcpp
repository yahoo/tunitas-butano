// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::butano::generation::randomness::distribution {
  //
  // Implementation details:
  // Various specializations avoid enums
  // Various specializations return aggregates, e.g. vector<bool>
  // 
  // The Implementation must be specialized against limits::Enum<ENUM> when IS_ENUM=true
  // The Implementation can be specialized against bounds characterization when IS_ENUM=false
  //
  // Get a Concept!
  // RESULT is the result of the distribution, an integral, a bit, a vector<bool>
  // BOUNDS is a type-wrapper around a RESULT-supplying structure with min() and max() from namespace limits
  // IS_ENUM is the output of std::is_enum<RESULT>::value
  template<typename RESULT, typename BOUNDS, bool IS_ENUM> struct Implementation;
}
// All specializations will need these
#forward tunitas.butano.generation.randomness.Engine
#forward tunitas.butano.generation.limits.ALL
#endiv
#divert <ipp>
#import tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.limits.ALL
#endiv
