// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.declaration
#import tunitas.butano.generation.limits.ALL // limits.enume.Class
namespace tunitas::butano::generation::randomness::distribution {
  template<typename ENUM, ENUM LOW, ENUM HIGH> class Implementation<ENUM, limits::enume::Class<ENUM, LOW, HIGH>, true>;
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.integer.ALL
#import tunitas.butano.generation.limits.ALL // limits::Bound
#forward tunitas.butano.generation.randomness.Engine
namespace tunitas::butano::generation::randomness::distribution {
  //
  // WATCHOUT - that ancestry in IS_ENUM=true and IS_ENUM=false
  //
  // The Implementation must be specialized against limits::enume::Class<ENUM> when IS_ENUM=true
  //                    or also specialized against limits::enume::Classlike<ENUM> when IS_ENUM=true
  //
  template<typename ENUM, ENUM LOW, ENUM HIGH> class Implementation<ENUM, limits::enume::Class<ENUM, LOW, HIGH>, true>
    : public Implementation<unsigned, limits::numeric::Bound<unsigned, (unsigned) limits::enume::Class<ENUM, LOW, HIGH>::min(), (unsigned) limits::enume::Class<ENUM, LOW, HIGH>::max()>, false> {
    // [[FIXTHIS]] sloppy ... what if the enum class is bigger than 32-bit unsigned?
    using ancestor = Implementation<unsigned, limits::numeric::Bound<unsigned, (unsigned) limits::enume::Class<ENUM, LOW, HIGH>::min(), (unsigned) limits::enume::Class<ENUM, LOW, HIGH>::max()>, false>;
  public:
    using Value = ENUM;
    Implementation() = default;
    inline explicit Implementation(Value high) : ancestor((unsigned)high) { }
    inline Implementation(Value low, Value high) : ancestor((unsigned)low, (unsigned)high) { }
    using Result = Value;
    inline auto operator()(Engine &engine) -> Result;
  };
}
#endiv
#divert <ipp>
namespace tunitas::butano::generation::randomness::distribution {
  template<typename E, E L, E H> auto Implementation<E, limits::enume::Class<E, L, H>, true>::operator()(Engine &engine) -> Result {
    return Result(ancestor::operator()(engine));
  }
}
#endiv
