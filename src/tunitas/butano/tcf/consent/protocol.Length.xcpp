// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::consent::protocol {
  //
  // The length is too great.
  // e.g. The BITFIELD is too long.
  //
  // Usage:
  //
  //    throw Length("FIELDNAME", hard_limit, breach_value);
  //
  class Length;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.Exception
#import stdexcept
#import string
#import sstream
#import cstdint
class tunitas::butano::tcf::consent::protocol::Length : public std::out_of_range, public tcf::Exception {
  using ancestor = std::out_of_range;
public:
  inline Length();
  inline explicit Length(std::string const &reason);
  // limit name is "hard" or "soft"
  inline explicit Length(char const *limit_name, char const *field_name, std::uintmax_t limit_value, std::uintmax_t breach_value);
  inline auto what() const noexcept -> char const * final;
private:
  static inline auto format(char const *limit_name, char const *field_name, std::uintmax_t limit_value, std::uintmax_t breach_value) -> std::string;
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::consent::protocol {
  Length::Length()
    : ancestor("invalid length")
  { }
  Length::Length(std::string const &reason)
    : ancestor(reason)
  { }
  // limit name is "hard" or "soft"
  Length::Length(char const *limit_name, char const *field_name, std::uintmax_t limit_value, std::uintmax_t breach_value)
    : ancestor(format(limit_name, field_name, limit_value, breach_value))
  { }
  auto Length::what() const noexcept -> char const * {
    return ancestor::what();
  }
  auto Length::format(char const *limit_name, char const *field_name, std::uintmax_t limit_value, std::uintmax_t breach_value) -> std::string {
    std::ostringstream buf;
    buf << limit_name << " limit on " << field_name << " limit " << limit_value << " breached by candidate " << breach_value;
    return buf.str();
  }
}
#endiv
