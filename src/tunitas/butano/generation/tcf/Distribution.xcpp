// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::generation::tcf {
  //
  // The distribution, used for developing a random IAB TCF consent object.
  //
  // Usage:
  //
  //     randomness::Engine engine(seeder)
  //     iab::tcf::Distribution distribution;
  //     Object obj = distribution(engine));      ........... how easy is that?
  //
  class Distribution;
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.tcf.distribution.fields.ALL
#import tunitas.butano.generation.tcf.distribution.Basis
#forward tunitas.butano.tcf.consent.Builder
#import tunitas.butano.tcf.consent.protocol.Field
#import tunitas.butano.tcf.consent.protocol.Polished
class tunitas::butano::generation::tcf::Distribution : public tcf::distribution::Basis {
  using ancestor = distribution::Basis;
  using Builder = tunitas::butano::tcf::consent::Builder;
public:
  inline Distribution();
  inline explicit Distribution(Version);
  using Result = tcf::singleton::Object;
  inline auto operator()(randomness::Engine &) -> Result;
  struct test { struct Access; };
protected:
  friend struct test::Access;
  using Engine = randomness::Engine;
  auto prep(Builder &, Engine &) -> void;
  using Field = tunitas::butano::tcf::consent::protocol::Field;
  //template<Field FIELD> using Value = tunitas::butano::tcf::consent::protocol::Limits<tunitas::butano::tcf::consent::protocol::Datum<FIELD>>;
  template<Field FIELD> using Value = tunitas::butano::tcf::consent::protocol::Polished<FIELD>;
  // [[FIXTHIS]] or abandon it; C++03 says: template<field FIELD> struct Limits : public tunitas::butano::tcf::consent::Limits<FIELD> { }
  // Specializations only
  template<Field FIELD> inline auto distribute(Engine &) -> typename Value<FIELD>::Type;
  distribution::id::version::Protocol protocol_version;
  distribution::protocol::Time time;
  distribution::id::Platform platform;
  distribution::id::version::Platform platform_version;
  distribution::id::Screen screen;
  distribution::id::Language language;
  distribution::id::version::VendorList vendorlist_version;
  distribution::purpose::Set purpose_set;
  // The distribution (span) is applied on a per-generation basis
  distribution::bitfield::Count bitfield_vendor_maximum; // MAXVENDORID count when Encoding::BITS   is the BITFIELD length
  // distribution::bitfield::Population chosen on site      (within the BITFIELD, at most, how many vendors?)
  distribution::vendor::Count ranges_vendor_maximum; //     MAXVENDORID count when Encoding::RANGES is distinct from the NUMENTRIES count
  distribution::range::Count ranges_count; //               within the entries, how many?  as NUMENTRIES
  distribution::Bit defaultconsent;
  distribution::Encoding encoding;
  distribution::Bit isrange;
private:
  // Because there is no other obvious tabular source for it ... and protocol::Limits<FIELD> is inappropriate.
  template<typename ENUM, Field FIELD> inline static auto low() -> ENUM { return ENUM(std::max(1u, (unsigned)Value<FIELD>::min())); }
  template<typename ENUM, Field FIELD> inline static auto high() -> ENUM { return ENUM(Value<FIELD>::max()); }
};
#import tunitas.butano.tcf.consent.protocol.Field
namespace tunitas::butano::generation::tcf {
  using namespace tunitas::butano::tcf::consent::protocol;
  template<> inline auto Distribution::distribute<VERSION>(Engine &) -> Value<VERSION>::Type;
  template<> inline auto Distribution::distribute<CREATED>(Engine &) -> Value<CREATED>::Type;
  template<> inline auto Distribution::distribute<LASTUPDATED>(Engine &) -> Value<LASTUPDATED>::Type;
  template<> inline auto Distribution::distribute<CMPID>(Engine &) -> Value<CMPID>::Type;
  template<> inline auto Distribution::distribute<CMPVERSION>(Engine &) -> Value<CMPVERSION>::Type;
  template<> inline auto Distribution::distribute<CONSENTSCREEN>(Engine &) -> Value<CONSENTSCREEN>::Type;
  template<> inline auto Distribution::distribute<CONSENTLANGUAGE>(Engine &) -> Value<CONSENTLANGUAGE>::Type;
  template<> inline auto Distribution::distribute<VENDORLISTVERSION>(Engine &) -> Value<VENDORLISTVERSION>::Type;
  // Marked as delete because otherwise it is ILL-POSED (no such) return which? bitfield_vendor_maximum(); or ranges_vendor_maximum() }
  template<> inline auto Distribution::distribute<MAXVENDORID>(Engine &) -> Value<MAXVENDORID>::Type = delete;
  template<> inline auto Distribution::distribute<NUMENTRIES>(Engine &) -> Value<NUMENTRIES>::Type;
  template<> inline auto Distribution::distribute<ENCODINGTYPE>(Engine &) -> Value<ENCODINGTYPE>::Type;
  template<> inline auto Distribution::distribute<DEFAULTCONSENT>(Engine &) -> Value<DEFAULTCONSENT>::Type;
  template<> inline auto Distribution::distribute<ISRANGE>(Engine &) -> Value<ISRANGE>::Type;
}
#endiv
#divert <ipp>
#import tunitas.butano.tcf.consent.Builder
#import want.timeline.clock.ALL
namespace tunitas::butano::generation::tcf {
  Distribution::Distribution()
    : ancestor()
    , protocol_version(low<singleton::id::version::Protocol, VERSION>(), high<singleton::id::version::Protocol, VERSION>())
    , time(want::timeline::clock::deci::now())
    , platform(low<singleton::id::Platform, CMPID>(), high<singleton::id::Platform, CMPID>())
    , platform_version(low<singleton::id::version::Platform, CMPVERSION>(), high<singleton::id::version::Platform, CMPVERSION>())
    , screen(low<singleton::id::Screen, CONSENTSCREEN>(), high<singleton::id::Screen, CONSENTSCREEN>())
    , language(low<singleton::id::Language, CONSENTLANGUAGE>(), high<singleton::id::Language, CONSENTLANGUAGE>())
    , vendorlist_version(low<singleton::id::version::VendorList, VENDORLISTVERSION>(), high<singleton::id::version::VendorList, VENDORLISTVERSION>())
    , purpose_set(Limits<Datum<PURPOSESALLOWED>>::max())
    , bitfield_vendor_maximum(Limits<Datum<BITFIELD>>::width())
    , ranges_vendor_maximum(Limits<Datum<MAXVENDORID>>::max())
    , ranges_count(Limits<Datum<NUMENTRIES>>::max())
    , defaultconsent()
    , encoding()
    , isrange()
  { }
  static_assert((unsigned)tunitas::butano::tcf::consent::Encoding::BITS < (unsigned)tunitas::butano::tcf::consent::Encoding::RANGES);
  Distribution::Distribution(Version want)
    : Distribution() {
    set_protocol_version = want;
  }
  auto Distribution::operator()(randomness::Engine &engine) -> Result {
    Builder bob;
    prep(bob, engine);
    return bob.build();
  }
  using namespace tunitas::butano::tcf::consent::protocol;
  template<> inline auto Distribution::distribute<VERSION>(Engine &engine) -> Value<VERSION>::Type {
    if (set_protocol_version) {
      return set_protocol_version.value();
    } else {
      return protocol_version(engine);
    }
  }
  template<> inline auto Distribution::distribute<CREATED>(Engine &engine) -> Value<CREATED>::Type { return time(engine); }
  template<> inline auto Distribution::distribute<LASTUPDATED>(Engine &engine) -> Value<LASTUPDATED>::Type { return time(engine); }
  template<> inline auto Distribution::distribute<CMPID>(Engine &engine) -> Value<CMPID>::Type { return platform(engine); }
  template<> inline auto Distribution::distribute<CMPVERSION>(Engine &engine) -> Value<CMPVERSION>::Type { return platform_version(engine); }
  template<> inline auto Distribution::distribute<CONSENTSCREEN>(Engine &engine) -> Value<CONSENTSCREEN>::Type { return screen(engine); }
  template<> inline auto Distribution::distribute<CONSENTLANGUAGE>(Engine &engine) -> Value<CONSENTLANGUAGE>::Type { return language(engine); }
  template<> inline auto Distribution::distribute<VENDORLISTVERSION>(Engine &engine) -> Value<VENDORLISTVERSION>::Type { return vendorlist_version(engine); }
  template<> inline auto Distribution::distribute<NUMENTRIES>(Engine &engine) -> Value<NUMENTRIES>::Type { return ranges_count(engine); }
  template<> inline auto Distribution::distribute<ENCODINGTYPE>(Engine &engine) -> Value<ENCODINGTYPE>::Type { return encoding(engine); }
  template<> inline auto Distribution::distribute<DEFAULTCONSENT>(Engine &engine) -> Value<DEFAULTCONSENT>::Type { return defaultconsent(engine); }
  template<> inline auto Distribution::distribute<ISRANGE>(Engine &engine) -> Value<ISRANGE>::Type { return isrange(engine); }
}
#endiv
#divert <cpp>  
#import tunitas.butano.tcf.consent.Builder
#import tunitas.butano.tcf.consent.encoding.Invalid
namespace tunitas::butano::generation::tcf {
  auto Distribution::prep(Builder &bob, Engine &engine) -> void {
    bob.accept<VERSION>(distribute<VERSION>(engine));
    bob.accept<CREATED>(distribute<CREATED>(engine));
    bob.accept<LASTUPDATED>(distribute<LASTUPDATED>(engine));
    bob.accept<CMPID>(distribute<CMPID>(engine));
    bob.accept<CMPVERSION>(distribute<CMPVERSION>(engine));
    bob.accept<CONSENTSCREEN>(distribute<CONSENTSCREEN>(engine));
    bob.accept<CONSENTLANGUAGE>(distribute<CONSENTLANGUAGE>(engine));
    bob.accept<VENDORLISTVERSION>(distribute<VENDORLISTVERSION>(engine));
    bob.accept<PURPOSESALLOWED>(purpose_set(engine));
    using tunitas::butano::tcf::consent::Encoding;
    auto const encodingType = distribute<ENCODINGTYPE>(engine);
    bob.accept<ENCODINGTYPE>(encodingType);
    if (Encoding::BITS == encodingType) {
      // Once we know BITS then the maximum vendor is limited by the BITFIELD length (9999)
      auto const maxVendorCount = bitfield_vendor_maximum(engine);
      bob.accept<MAXVENDORID>(maxVendorCount);
      // Once we know that length, then how many vendors shall be enabled?
      distribution::bitfield::Population distribution(maxVendorCount);
      bob.accept<BITFIELD>(distribution(engine));
    } else if (Encoding::RANGES == encodingType) {
      auto const maxVendorCount = ranges_vendor_maximum(engine);
      bob.accept<MAXVENDORID>(maxVendorCount);
      bob.accept<DEFAULTCONSENT>(distribute<DEFAULTCONSENT>(engine));
      auto const numEntries = distribute<NUMENTRIES>(engine);
      bob.accept<NUMENTRIES>(numEntries);
      auto const maxVendorId = tunitas::butano::tcf::id::Vendor(maxVendorCount);
      for (auto e(0u+numEntries), i(0u+e-e); e != i; ++i) {
        auto const isrange = distribute<ISRANGE>(engine);
        bob.accept<ISRANGE>(isrange);
        if (isrange) {
          distribution::range::Population distrib(maxVendorId);
          auto const pair = depathologize(distrib(engine));
          bob.accept<STARTVENDORID>(pair.first);
          bob.accept<ENDVENDORID>(pair.second);
        } else {
          distribution::vendor::Population distrib(maxVendorId);
          bob.accept<SINGLEVENDORID>(distrib(engine));
        }
      }
    } else {
      throw tunitas::butano::tcf::consent::encoding::Invalid{};
    }
  }
}
#endiv
