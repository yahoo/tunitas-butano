// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.butano.generation.tcf.Generator.declaration
namespace tunitas::butano::generation::tcf {
  //
  // Generate a (pseudo-)random IAB TCF consent object.
  //
  // Usage:
  //
  //   std::seed_seq seeder{...something...};
  //   Generator<consent::Object> generator(seeder);
  //   Object obj = generator();      ............................. how easy is that?
  //
  template<> class Generator<Object>;
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.tcf.Distribution
#import std.seed_seq
namespace tunitas::butano::generation::tcf {
  template<> class Generator<Object> {
    using Version = generation::tcf::singleton::id::version::Protocol;
  public:
    inline explicit Generator(std::seed_seq &);
    inline Generator(std::seed_seq &, Version);
    using Result = tcf::singleton::Object;
    inline auto operator()() -> Result;
  protected:
    randomness::Engine engine;
    Distribution distribution;
  };
}
#endiv
#divert <ipp>
namespace tunitas::butano::generation::tcf {
  Generator<Object>::Generator(std::seed_seq &seeder)
    : engine(seeder)
    , distribution()
    { }
  Generator<Object>::Generator(std::seed_seq &seeder, Version want)
    : engine(seeder)
    , distribution(want)
    { }
  auto Generator<Object>::operator()() -> Result {
    return distribution(engine);
  }
}
#endiv
