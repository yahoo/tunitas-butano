// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::format {
  namespace detail { enum Dump { }; }
}
#endiv
#divert <hpp>
#forward tunitas.butano.tcf.format.detail.Formatter
#import tunitas.butano.tcf.consent.Object
#import std.ostream
namespace tunitas::butano::tcf::format {
  // ADL will NOT find it
  inline auto dump(consent::Object o) -> detail::Formatter<detail::Dump, consent::Object>;
  namespace detail {
    // ADL will find it
    template<> inline auto operator<<(std::ostream &os, Formatter<Dump, consent::Object> const &co) -> std::ostream &;
  }
}
#endiv
#divert <ipp>
#import tunitas.butano.tcf.format.detail.Formatter
namespace tunitas::butano::tcf {
  inline auto format::dump(consent::Object o) -> detail::Formatter<detail::Dump, consent::Object> {
    return detail::Formatter<detail::Dump, consent::Object>(o);
  }
  template<> inline auto format::detail::operator<<(std::ostream &os, Formatter<Dump, consent::Object> const &co) -> std::ostream & {
    return static_cast<tcf::detail::Stringable const &>(co.value).dump(os); // [[FIXTHIS]] this will add that extra unexpected newline.
  }
}
#endiv
