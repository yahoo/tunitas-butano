// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
#divert <hpp>
#import app.Argv
#import std.ostream
#import std.string
namespace app::dump {
  inline auto const NAME = "dump-iab"s;
  auto remain(Argv) -> void;
  auto usage(std::string const &, std::ostream &) -> void;
}
#endiv
#divert <cpp>
auto app::dump::usage(std::string const &name, std::ostream &out) -> void {
  out << "usage: " << name << " { base64 ... }\n"
      << "\n"
      << "example: BOKXjmcOKXjmcAOABAENACAAAAAAU8A ... etc.\n";
}
#import app.argv.parser.Dumper
#import nonstd.exception.Quitting
#import std.cerr
#import std.cout
#import std.move
#import sys.exits.constants
#import tunitas.base64.Exception
#import tunitas.butano.tcf.Exception
#import tunitas.butano.tcf.format.dump
#import want.lite.base64.decode
#import want.lite.base64.sloppy.decode
auto app::dump::remain(Argv av) -> void {
  argv::parser::Dumper pa(std::move(av), NAME, &usage);
  bool failure(false);
  for (auto word : pa.residual()) {
    //            success:
    //            failure:
    std::cout << "  given: " << word << '\n';
    try {
      auto fixed = want::lite::base64::sloppy::decode(word);
      if (!ok(fixed)) {
        std::cerr << "warning: the base64 specimen is irredeemable, trying to decode it anyway\n";
      } else if (value(fixed) != word) {
        auto const thismany = count(fixed);
        auto const nouns = 1 == thismany ? "character" : "characters";
        std::cerr << NAME << ": warning, the base64 specimen " << value(fixed) << " was only redeemable after appending " << thismany << " '=' " << nouns << ", continuing\n";
        word = value(std::move(fixed));
      }
      auto const obj = tunitas::butano::tcf::consent::decode(word);
      std::cout << "success: " << tunitas::butano::tcf::format::dump(obj) << '\n';
    } catch (...) {
      failure = true;
      std::string reason = "no reason given";
      try {
        throw;
      } catch (tunitas::base64::Exception const &e) {
        reason = "a base64 decoding failure " + std::string(e.what());
      } catch (tunitas::butano::tcf::Exception const &e) {
        reason = "an IAB TCF decoding failure " + std::string(e.what());
      } catch (std::exception const &e) {
        reason = "some problem " + std::string(e.what());
      }
      std::cout << "failure: reason " << reason << ", no interpretation as an IAB TCF\n";
    }
  }
  if (failure) {
    std::cerr << NAME << ": error, there were problems in parsing the IAB TCF examples\n";
    if (pa.ignore_errors()) {
    std::cerr << NAME << ": notice, there were errors but exiting successfully anyway because of --ignore-errors\n";
    } else {
      throw nonstd::exception::Quitting{NAME, sys::exits::FAIL};
    }
  }
}
#import app.Quitting
#import std.cerr
#import std.cout
#import std.exception
auto main(int argc, char *argv[]) -> int {
  using namespace app;
  try {
    dump::remain(Argv(&argv[0], &argv[argc]));
    return 0;
  } catch (Quitting const &q) {
    std::cout << q << '\n';
    return q.exit_code();
  } catch (std::exception const &e) { 
    std::cerr << dump::NAME << ": error, " << e.what() << '\n';
    return 1;
  }
}
#endiv
