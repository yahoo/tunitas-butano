// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media (c) 2018-2019, the license statement is nearby; licensable under Apache 2.0
#divert <fpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.declaration
#import tunitas.butano.generation.randomness.limits.ALL // limits::enume::Classlike
#import tunitas.butano.generation.Enum
namespace tunitas::butano::generation::randomness::distribution {
  template<typename INT> class Implementation<Enum<INT>, limits::enume::Classlike<Enum<INT>>, true>;
}
#endiv
#divert <hpp>
#forward tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.randomness.distribution.Implementation.integer.ALL
#import tunitas.butano.generation.randomness.limits.ALL // limits::Bound
namespace tunitas::butano::generation::randomness::distribution {
  //
  // The Implementation must be specialized against limits::enume::Class<ENUM> when IS_ENUM=true
  //                    or else specialized against limits::enume::Classlike<ENUM>
  //
  template<typename INT> class Implementation<Enum<INT>, limits::enume::Classlike<Enum<INT>>, true>
    : public Implementation<INT, limits::Bound<INT, (INT) limits::enume::Classlike<Enum<INT>>::min(), (INT) limits::enume::Classlike<Enum<INT>>::max()>, false> {
    using ancestor = Implementation<INT, limits::Bound<INT, (INT) limits::enume::Classlike<Enum<INT>>::min(), (INT) limits::enume::Classlike<Enum<INT>>::max()>, false>;
  public:
    using Value = Enum<INT>;
    Implementation() = default;
    inline explicit Implementation(Value high) : ancestor((INT)high) { }
    inline Implementation(Value low, Value high) : ancestor((INT) low, (INT)high) { }
    using Result = Value;
    inline auto operator()(Engine &engine) -> Result;
  };
}
#endiv
#divert <ipp>
#import tunitas.butano.generation.randomness.Engine
namespace tunitas::butano::generation::randomness::distribution {
  template<typename I> auto Implementation<Enum<I>, limits::enume::Classlike<Enum<I>>, true>::operator()(Engine &engine) -> Result {
    return Result(ancestor::operator()(engine));
  }
}
#endiv
