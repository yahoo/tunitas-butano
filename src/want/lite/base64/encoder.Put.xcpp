// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace want::lite::base64::encoder {
  //
  // An invalid put<...>(...) operation out of the base64 encoder bitstream.
  //
  // Usage:
  //
  //   throw encoder::Put("zero size");
  //   throw encoder::Put("too big");
  //
  class Put;
}
#endiv
#divert <hpp>
#import std.invalid_argument
#import std.string
#import want.lite.base64.Exception
class want::lite::base64::encoder::Put : public std::invalid_argument, public base64::Exception {
  struct Ancestors {
    using Exception = std::invalid_argument;
    using Aspect = base64::Exception;
  };
public:
  inline Put();
  inline explicit Put(std::string const &reason);
  auto what() const noexcept -> char const * final;
};
#endiv
#divert <ipp>
want::lite::base64::encoder::Put::Put()
  : Ancestors::Exception("put")
{ }
want::lite::base64::encoder::Put::Put(std::string const &reason)
  : Ancestors::Exception(reason)
{ }
#endiv
#divert <cpp>
auto want::lite::base64::encoder::Put::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv
