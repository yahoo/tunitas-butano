// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::butano::tcf::detail {
  //
  // Some implementation detail; can be turned into a string; is stringable;
  // Descendants only
  //
  // Usage:
  //
  //   See the descendants format::detail::Formatter<...>
  //
  class Stringable;
}
#endiv
#divert <hpp>
#import std.ostream
namespace tunitas::butano::tcf::detail {
  inline auto operator<<(std::ostream &o, Stringable const &s) -> std::ostream &;
}
#import std.string
#import tunitas.butano.tcf.format.detail.Formatter // operator<<
class tunitas::butano::tcf::detail::Stringable {
protected:
  ~Stringable() = default;
  virtual auto dump(std::ostream &) const -> std::ostream & = 0;
  template<typename U, typename D, typename A> friend auto format::detail::operator<<(std::ostream &, format::detail::Formatter<U, D, A> const &) -> std::ostream &;
  friend auto detail::operator<<(std::ostream &o, Stringable const &s) -> std::ostream &;
public:
  virtual auto toString() const -> std::string;
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf {
  auto detail::operator<<(std::ostream &o, Stringable const &s) -> std::ostream & {
    return s.dump(o);
  }
}
#endiv
#divert <cpp>
#import std.ostringstream
namespace tunitas::butano::tcf::detail {
  auto Stringable::toString() const -> std::string {
    std::ostringstream buf;
    this->dump(buf);
    return buf.str();
  }
}
#endiv
