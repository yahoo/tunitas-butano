// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::generation::limits::time {
  // Get a Concept!  DURATION is a std::chrono::duration<...>
  template<typename UNIQUENESS, typename DURATION> struct Span;
  enum Recently { RECENTLY };
  enum Soon { SOON };
}
#endiv
#divert <hpp>
#import tunitas.butano.generation.limits.time // Point, point_cast<...>(...), Cloc,, etc.
namespace tunitas::butano::generation::limits {
  template<typename UNIQUENESS, typename DURATION> struct time::Span {
    using Duration = DURATION;
    using Point = time::Point<DURATION>;
    using Value = Point;
    static auto min() -> Value { return Point(Duration(0)); }
    static auto max() -> Value { return point_cast<Duration>(Clock::now()); }
  };
}
#import tunitas.butano.generation.limits.time.detail.Thenable
namespace tunitas::butano::generation::limits::time {
  template<typename DURATION> struct Span<Recently, DURATION> : protected detail::Thenable {
    using Duration = DURATION;
    using Point = time::Point<DURATION>;
    using Value = Point;
    // [[FIXTHIS]] n.b. this gets time twice.  So the span is always drifting as you query for it.
    static auto min() -> Value { return then<Point>(-Days(7)); }
    static auto max() -> Value { return now<Point>(); }
  };
  template<typename DURATION> struct Span<Soon, DURATION> : protected detail::Thenable {
    using Duration = DURATION;
    using Point = time::Point<DURATION>;
    using Value = Point;
    // [[FIXTHIS]] n.b. this gets time twice.  So the span is always drifting as you query for it.
    static auto min() -> Value { return then<Point>(-Days(1)); }
    static auto max() -> Value { return then<Point>(Days(2)); }
  };
}
#endiv
