// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tests::unit::randomness { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::randomness::Fixture : public cppunit::test::Fixture {
  template<typename TYPE> auto test_Distribution() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import tunitas.butano.generation.randomness.Engine
#import tunitas.butano.generation.randomness.Distribution
template<typename TYPE> auto tests::unit::randomness::Fixture::test_Distribution() -> void {
  using Engine = tunitas::butano::generation::randomness::Engine;
  using Subject = tunitas::butano::generation::randomness::Distribution<TYPE>;
  Engine engine;
  Subject subject;
  auto generated = subject(engine);
  // Could be any value, including zero (false)
  CPPUNIT_ASSERT(sizeof (generated));
}
#endiv
#divert <cpp>
#import std.byte
auto tests::unit::randomness::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"randomness"};
  series << []{
              Stream dis("Distribution");
              dis << call("bool", &Fixture::test_Distribution<bool>)
                  << call("byte", &Fixture::test_Distribution<std::byte>)
                  << call("char", &Fixture::test_Distribution<char>)
                  << END;
              return dis;
            }()
         << END;
  return finalize(series);
}
#endiv
