// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media (c) 2018-2019, the license statement is nearby; licensable under Apache 2.0
#divert <fpp>
namespace tunitas::butano::tcf::version {
  //
  // The version is not supported by Verizon.
  // It is in the valid range, but ... we don't support that.
  //
  // Usage:
  //
  //    throw Unsupported(...)
  //
  class Unsupported;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.Exception
#import tunitas.butano.tcf.exception.Range
#import std.out_of_range
#import std.string
#import tunitas.butano.tcf.id.ALL
class tunitas::butano::tcf::version::Unsupported : public std::out_of_range, public tcf::Exception {
  struct ancestors {
    using Aspect = tcf::Exception;
    using Exception = std::out_of_range;
  };
public:
  inline Unsupported();
  inline explicit Unsupported(std::string const &reason);
  inline explicit Unsupported(id::version::Protocol offensive);
  auto what() const noexcept -> char const * final;
private:
  inline static auto format(id::version::Protocol offensive) -> std::string;
};
#endiv
#divert <ipp>
#import std.ostringstream
namespace tunitas::butano::tcf::version {
  Unsupported::Unsupported()
    : ancestors::Exception("invalid version")
  { }
  Unsupported::Unsupported(std::string const &reason)
    : ancestors::Exception{reason}
  { }
  Unsupported::Unsupported(id::version::Protocol offensive)
    : ancestors::Exception(format(offensive))
  { }
  auto Unsupported::format(id::version::Protocol offensive) -> std::string {
    std::ostringstream buf;
    buf << "Version id: " << offensive << " is unsupported.";
    return buf.str();
  }
}
#endiv
#divert <cpp>
auto tunitas::butano::tcf::version::Unsupported::what() const noexcept -> char const * {
  return ancestors::Exception::what();
}
#endiv
