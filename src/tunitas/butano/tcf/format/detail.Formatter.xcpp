// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::butano::tcf::format::detail {
  template<typename UNIQUENESS, typename TYPE, typename ARGUMENT = /*by const reference*/ TYPE const &> struct Formatter;
}
#endiv
#divert <hpp>
#import std.ostream
namespace tunitas::butano::tcf::format::detail {
  template<typename UNIQUENESS, typename TYPE, typename ARGUMENT> inline auto operator<<(std::ostream &, Formatter<UNIQUENESS, TYPE, ARGUMENT> const &) -> std::ostream &;
}
namespace tunitas::butano::tcf::format {
  template<typename UNIQUENESS, typename TYPE, typename ARGUMENT> struct detail::Formatter {
  public:
    using Value = TYPE;
    using Argument = ARGUMENT;
    inline explicit Formatter(ARGUMENT);
    Value value;
  };
}
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::format {
  template<typename UNIQUENESS, typename TYPE, typename ARGUMENT> auto detail::operator<<(std::ostream &os, Formatter<UNIQUENESS, TYPE, ARGUMENT> const &fo) -> std::ostream & {
    return os << fo.value; // do whatever the "native" operator<< did
  }
}
// All the magic happens in the operator<<, which are declared and defined near the functions that create them.
// But in case there is no magic then an attempt is made to use the ADL-discovered operator<<
namespace tunitas::butano::tcf::format::detail {
  template<typename U, typename T, typename A> Formatter<U,T,A>::Formatter(Argument value)
    : value(value)
  { }
}
#endiv
