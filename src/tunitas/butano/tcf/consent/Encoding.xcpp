// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::consent {
  enum Encoding { BITS, RANGES };
  inline constexpr auto VENDOR_CONSENT_BITS = Encoding::BITS;
  inline constexpr auto VENDOR_CONSENT_RANGES = Encoding::RANGES;
  inline constexpr auto VENDOR_CONSENT_RANGE = Encoding::RANGES;  // [[deprecating]]
}
#endiv
#divert <hpp>
#import ostream
#import string
namespace tunitas::butano::tcf::consent {
  inline auto operator<<(std::ostream &os, Encoding en) -> std::ostream &;
  inline auto to_string(Encoding e) -> std::string;
}
namespace std {
  // Because that is where everyone expects to find it in C++17.
  using tunitas::butano::tcf::consent::to_string;
}
#endiv
#divert <ipp>
namespace tunitas::butano::tcf {
  inline auto consent::operator<<(std::ostream &os, Encoding en) -> std::ostream & {
    // Be paranoid about the values in Encoding e
    // ... because they originate off-the-wire or off-of-disk; they can be anything.
    if (BITS == en)        { return os << "BITS"; }
    else if (RANGES == en) { return os << "RANGES"; }
    else                   { return os << "Encoding=" << (int)en; }
  }
  inline auto consent::to_string(Encoding e) -> std::string {
    // ibidem.
    return BITS == e ? "BITS" : RANGES == e ? "RANGES" : "Encoding=" + std::to_string((int)e);
  }
}
#endiv
