// This is C++2a -*- c++ -*- in the S.C.O.L.D. Stylings that are so popular these days
// Copyright Verizon Media (c) 2018-2019, the license statement is nearby; licensable under Apache 2.0
#divert <fpp>
#import generation.tcf.Generator.declaration
namespace generation::tcf {
  //
  // Generate a (pseudo-)random IAB TCF consent object.
  //
  // Usage:
  //
  //   std::seed_seq seeder{...something...};
  //   Generator<consent::String> generator(seeder);
  //   consent::String str = generator();      ........................ how easy is that?
  //
  template<> class Generator<String>;
}
#endiv
#divert <hpp>
#import generation.tcf.Generator.Object
#import generation.tcf.distribution.fields.ALL
#import tunitas.butano.tcf.consent.String
#import tunitas.butano.tcf.consent.Builder
#import tunitas.butano.tcf.consent.Object
template<> class generation::tcf::Generator<generation::tcf::String> {
  using Version = singleton::id::version::Protocol;
  using Object = tunitas::butano::tcf::consent::Object;
  using Builder = tunitas::butano::tcf::consent::Builder;
public:
  inline explicit Generator(std::seed_seq &);
  inline Generator(std::seed_seq &, Version);
  using Result = tcf::String;
  auto operator()() -> Result;
protected:
  Generator<Object> subgen;
};
#endiv
#divert <ipp>
#import tunitas.butano.tcf.consent.encode
namespace generation::tcf {
  Generator<String>::Generator(std::seed_seq &seeder)
    : subgen(seeder)
  { }
  Generator<String>::Generator(std::seed_seq &seeder, Version want)
    : subgen(seeder, want)
  { }
  auto Generator<String>::operator()() -> Result {
    return encode(subgen());
  }
}
#endiv
