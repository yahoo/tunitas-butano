// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace app::argv::parser {
  //
  // An argv parser for a unit tester.
  //
  // Parse the argv as RAII, offer the results as the constructed object.
  // Throws Quitting when the parse invariants are not satisfied
  // Has a fixed, standardized, usage message.
  //
  // n.b. rigging::Main is made out of argv::parser::Unit
  //
  // Scheme:
  //    no real options, beyond the boilerplate ones.
  //    no words allowed, no non-option argv.
  //
  // Example:
  //
  //    bin/unit
  //
  // Usage:
  //
  //  auto remain(Argv av) -> int {
  //     parser::Unit pa(std::move(argv), unit_something::NAME);
  //     ...parsed on RAII, threw Quitting if not satisfied.
  //     ...do YOUR stuff...
  //  }
  //  auto main(int c, char *v[]) -> int {
  //    return remain(Argv(c, v))
  //  }
  //
  class Unit;
}
#endiv
#divert <hpp>
#import app.argv.Object
#import app.argv.parser.Basis
#import std.function
#import std.ostream
class app::argv::parser::Unit : public Basis {
  using Ancestor = Basis;
public:
  inline explicit Unit(Argv a, Name n) { parse(a, n); }
private:
  auto parse([[inout]] Argv &, Name const &) -> void;
  static auto usage(Name const &, std::ostream &) -> void;
};
#endiv
#divert <cpp>
#import app.argv.among
#import app.exception.Quitting
#import std.cerr
#import std.cout
#import sys.exits.constants
auto app::argv::parser::Unit::parse(Argv &av, Name const &NAME) -> void {
  av.pop_front();
  for ( ; !av.empty(); av.pop_front()) {
    auto const first = av.front();
    if (first == among("-h", "--help", "--usage")) {
      usage(NAME, std::cout);
      throw exception::Quitting{NAME, sys::exits::OK};
    } else if (first.empty() || '-' != first.front()) {
      // The first non-option word.
      break;
    } else {
      std::cerr << NAME << COLON_NOTICE_BANNER
                << NAME << ": error, unknown option " << first << '\n';
      throw exception::Quitting(NAME, sys::exits::USAGE);
    }
  }
  if (!av.empty()) {
    std::cerr << NAME << COLON_NOTICE_BANNER
              << NAME << ": error, no non-option words are supported in a unit tester\n"
      ;
    throw exception::Quitting{NAME, sys::exits::USAGE};
  }
}
auto app::argv::parser::Unit::usage(Name const &NAME, std::ostream &outbound) -> void {
  outbound << "usage: " << NAME << "      (no further options)\n";
}
#endiv
