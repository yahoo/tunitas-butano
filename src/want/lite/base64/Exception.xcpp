// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace want::lite::base64 {
  //
  // A mixin for the base64 encoder exceptions.
  // Descendants only.
  //
  // This allows catching the base64 exceptions by ancestry
  // but also allows each exception to be implemented by a different <stdexcept> exception.
  //
  // Usage:
  //
  //   class want::lite::base64::decoder::UnwelcomeSurprise : public std::out_of_range, public base64::Exception {
  //     using Ancestor = std::out_of_range;
  //   public:
  //     using Ancestor::out_of_range;
  //     auto what() const noexcept -> char const * { return Ancestor::what(); }
  //   };
  //
  //   try {
  //     ...
  //     ...encode or decode...
  //     ...
  //   } catch (base64::Exception const &e) {
  //     ...something base64...
  //   } catch (std::exception const &e) {
  //     ...something else...
  //   }
  //   throw encoder::Invalid("that was bad");
  //
  class Exception;
}
#endiv
#divert <hpp>
class want::lite::base64::Exception {
protected:
  virtual ~Exception() = default;
public:
  virtual auto what() const noexcept -> char const * = 0; // the MI must be unified in the descendant.
};
#endiv
