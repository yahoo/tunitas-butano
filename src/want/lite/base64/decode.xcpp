// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <hpp>
#import std.string
#import std.vector
namespace want::lite::base64 {
  // Get a Concept!  RESULT must be std::string, std::vector<char>, std::vector<bool>
  template<typename RESULT> inline auto decode(std::string const &source) -> RESULT;
  template<> inline auto base64::decode<std::vector<bool>>(std::string const &source) -> std::vector<bool>;
  inline auto decode(std::string const &source) -> std::string;
}
#endiv
#divert <ipp>
#import want.lite.base64.Decoder
#import std.move
namespace want::lite {
  auto base64::decode(std::string const &source) -> std::string {
    return decode<std::string>(source);
  }
  template<typename RESULT> auto base64::decode(std::string const &source) -> RESULT {
    RESULT ret;
    Decoder dec(source);
    // Because base64 is "made of" quads of 6-bit quantities., we may not have octets.
    // We may wind up being short (i.e. this will throw on underflow)
    while ( !dec.eof() ) {
      ret.push_back(dec.get<char>());
    }
    return std::move(ret);
  }
  template<> auto base64::decode<std::vector<bool>>(std::string const &source) -> std::vector<bool> {
    Decoder dec(source);
    return std::move(dec.disgorge());
  }
}
#endiv
