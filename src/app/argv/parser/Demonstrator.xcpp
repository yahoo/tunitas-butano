// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
namespace app::argv::parser {
  //
  // An argv parser for a demonstration program.
  //
  // Parse the argv as RAII, offer the results as the constructed object.
  // Throws Quitting when the parse is invariants are not satisfied
  //
  // Scheme:
  //    no real options, beyond the boilerplate ones.
  //    one (1) or more (2+) words are required.
  //
  // Example:
  //
  //    bin/demo this that the other
  //
  // Usage:
  //
  //  auto usage(std::ostream &out) -> void { ...emit.usage... }
  //  auto remain(Argv av) -> int {
  //     parser::Demonstrator pa(std::move(argv), "demo", &usage);
  //     ...parsed on RAII, threw Quitting if not satisfied.
  //     ...do YOUR stuff...
  //  }
  //  auto main(int c, char *v[]) -> int {
  //    return remain(Argv(c, v))
  //  }
  //
  class Demonstrator;
}
#endiv
#divert <hpp>
#import app.argv.parser.Basis
#import app.argv.parser.residual.Aspect
#import app.argv.parser.prattle.Aspect
class app::argv::parser::Demonstrator : public Basis, public residual::Aspect, public prattle::Aspect {
  using ancestor = Basis;
public:
  inline explicit Demonstrator(Argv a, Name n, Usage u) { parse(a, n, u); }
private:
  auto parse([[inout]] Argv &, Name const &, Usage) -> void;
};
#endiv
#divert <cpp>
#import app.exception.Quitting
#import std.cerr
#import std.cout
#import std.move
#import sys.exits.constants
#import app.argv.among
auto app::argv::parser::Demonstrator::parse(Argv &av, Name const &NAME, Usage USAGE) -> void {
  av.pop_front();
  for ( ; !av.empty(); av.pop_front()) {
    auto const first = av.front();
    if (first == among("-h", "--help", "--usage")) {
      USAGE(NAME, std::cout);
      throw exception::Quitting{NAME, sys::exits::OK};
    } else if (first == among("-q", "--quiet")) {
      parsing_prattle.quiet = true;
    } else if (first == among("-v", "--verbose")) {
      parsing_prattle.verbose = true;
    } else if (first.empty() || '-' != first.front()) {
      // The first non-option word.
      break;
    } else {
      std::cerr << NAME << COLON_NOTICE_BANNER
                << NAME << ": error, unknown option " << first << '\n';
      throw exception::Quitting{NAME, sys::exits::USAGE};
    }
  }
  if (av.empty()) {
    std::cerr << NAME << COLON_NOTICE_BANNER
              << NAME << ": error, at least one no non-option word is required\n"
      ;
    throw exception::Quitting(NAME, sys::exits::USAGE);
  }
  parsing_residual = std::move(av);
}
#endiv
