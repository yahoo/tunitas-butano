// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-butano/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::butano::tcf::consent {
  //
  // The bit set
  // [[FIXTHIS]] - a horrendous implementation.
  //
  // This is the java way to say it
  //
  // Usage:
  //
  //   rly?
  //
  class Bits;
}
#endiv
#divert <hpp>
#import want.javalike
#import tunitas.butano.tcf.id.ALL
#import tunitas.butano.tcf.detail.Stringable
#import tunitas.butano.tcf.consent.protocol.Limits
#import tunitas.butano.tcf.vendor.Null
#import want.javalike.Map
#import want.javalike.Boolean
class tunitas::butano::tcf::consent::Bits : public want::javalike::Map<id::Vendor, want::javalike::Boolean>, public tcf::detail::Stringable {
  using ancestor = want::javalike::Map<id::Vendor, want::javalike::Boolean>;
  using BLimits = protocol::Limits<protocol::Datum<protocol::BITFIELD>>;
  using VLimits = protocol::Limits<id::Vendor>;
public:
  Bits() = default;
  inline explicit Bits(Defaulting);
  inline auto get(id::Vendor) const -> bool;
  inline auto put(id::Vendor, bool) -> void;
protected:
  auto dump(std::ostream &outbound) const -> std::ostream & final;
};
#endiv
#divert <ipp>
namespace tunitas::butano::tcf::consent {
  Bits::Bits(Defaulting) : ancestor() {
    // Same as consent::Ranges, nearby
    ancestor &self(*this);
    // WATCHOUT - don't go over BLimits::width() because the Builder won't accept it
    for (auto i(VLimits::begin(without::NULLID)), e(VLimits::end(without::NULLID)); e != i && i <= BLimits::width(); ++i) {
      id::Vendor const v = id::Vendor(i);
      self[v] = false;
    }
  }
  // This is the java way to say it
  auto Bits::get(id::Vendor i) const -> bool {
    auto const e = ancestor::end();
    auto const f = ancestor::find(i);
    return e != f && f->second;
  }
  auto Bits::put(id::Vendor i, bool b) -> void {
    ancestor &self(*this);
    if (0 == (int)i) {
      throw vendor::Null();
    }
    self[i] = b;
  }
}
#endiv
#divert <cpp>
namespace tunitas::butano::tcf::consent {
  auto Bits::dump(std::ostream &outbound) const -> std::ostream & {
    outbound << "[";
    for (auto const &pair : *this) {
      // [[FIXTHIS]] the Bits type is a Map, not a bit vector; the Map may not be dense.
      outbound << "{" << pair.first << '=' << pair.second << "}";
    }
    return outbound << "]";
  }
}
#endiv
