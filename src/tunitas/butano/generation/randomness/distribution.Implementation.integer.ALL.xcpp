// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
#import tunitas.butano.generation.randomness.distribution.Implementation.declaration
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
#import std.size_t
#import tunitas.butano.generation.limits.ALL // [[deprecating]] Numeric, Width, High
#import tunitas.butano.generation.limits.Numeric
namespace tunitas::butano::generation::randomness::distribution::implementation {
  //
  // Some (pseudo-)random number generators particularized to specific limits.
  //
  // Usage:
  //
  //     Basic basic(1, 3);            starts with a default seeder, always the same sequence
  //     Basic better(seeder, 1, 3);
  //     Basic better(seeder, 0, 1);   as if you wanted bitwise
  //
  using Unsigned64 = Implementation<std::uint64_t, limits::Numeric<std::uint64_t>, false>;
  using Unsigned32 = Implementation<std::uint32_t, limits::Numeric<std::uint32_t>, false>;
  using Unsigned16 = Implementation<std::uint16_t, limits::Numeric<std::uint16_t>, false>;
  using Unsigned8 = Implementation<std::uint8_t, limits::Numeric<std::uint8_t>, false>;
  //
  using Signed64 = Implementation<std::int64_t, limits::Numeric<std::int64_t>, false>;
  using Signed32 = Implementation<std::int32_t, limits::Numeric<std::int32_t>, false>;
  using Signed16 = Implementation<std::int16_t, limits::Numeric<std::int16_t>, false>;
  using Signed8 = Implementation<std::int8_t, limits::Numeric<std::int8_t>, false>;
  //
  using Unsigned24 = Implementation<std::uint32_t, limits::numeric::Width<24, std::uint32_t>, false>;
  using Unsigned12 = Implementation<std::uint16_t, limits::numeric::Width<12, std::uint16_t>, false>;
  using Unsigned5 = Implementation<std::uint8_t, limits::numeric::Width<5, std::uint8_t>, false>;
  using Unsigned3 = Implementation<std::uint8_t, limits::numeric::Width<3, std::uint8_t>, false>;
  using Unsigned1 = Implementation<std::uint8_t, limits::numeric::Width<1, std::uint8_t>, false>;

  // Get a Concept!  0 < BOUND <= 2^(8*sizeof(RESULT))
  using Unsigned9999 = Implementation<std::uint32_t, limits::numeric::Bound<std::uint32_t, 0u, 9999u>, false>;
}
#endiv
#divert <hpp>
#import std.uniform_int_distribution
#import std.is_enum
#import std.is_same
namespace tunitas::butano::generation::randomness::distribution {
  template<typename RESULT, typename BOUND> class Implementation<RESULT, BOUND, false> : public std::uniform_int_distribution<RESULT> {
    using Ancestor = std::uniform_int_distribution<RESULT>;
    static_assert(!std::is_enum<RESULT>::value);
    static_assert(!std::is_same<RESULT, bool>::value);
    using Bound = BOUND;
  public:
    using Value = RESULT;
    inline Implementation() : Ancestor{Bound::min(), Bound::max()} { }
    inline explicit Implementation(Value high) : Ancestor{Bound::min(), high} { }
    inline Implementation(Value low, Value high) : Ancestor{low, high} { }
    using Result = Value;
    using Ancestor::operator();
  };
}
#endiv
