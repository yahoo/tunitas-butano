// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-butano/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/butano/tree/LICENSE
#divert <fpp>
namespace tunitas::butano::tcf::consent::encoding {
  //
  // An invariant has failed in the TCF encoding subsystem.
  // See the commentariat in the ancestor.
  //
  // Usage:
  //
  //   throw Invariant{};
  //   throw Invariant{"1 == 1"};    .... the reason should state the invariant's truth (not what failed)
  //
  class Invariant;
}
#endiv
#divert <hpp>
#import tunitas.butano.tcf.exception.Invariant
class tunitas::butano::tcf::consent::encoding::Invariant : public tcf::exception::Invariant {
  using ancestor = tcf::exception::Invariant;
public:
  Invariant() = default;
  inline explicit Invariant(std::string const &reason) : ancestor{reason} { }
};
#endiv
